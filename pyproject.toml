#To use Poetry for building and managing your package:
#Install Poetry:
#	pip install poetry
#
#Initialize Poetry in your project (this will update your pyproject.toml):
#	poetry init
#or if you already have pyproject.toml, just run:
#	poetry install
#Build your package:
#	poetry build
#Poetry will read all metadata from your pyproject.toml and create distribution files in the dist directory.

#***** SEQUENCE OF COMMANDS TO RUN *************
# step 1
#After making changes to pyproject.toml, run these commands in sequence:
#Update the lock file:
# #####poetry lock

# step 2
#Install dependencies and create/update the virtual environment:
# #####poetry install    or   poetry install --extras test (with optional dependencies Ex: pytest)
#Build the package:
# #####poetry build


#Running :
# #####poetry run pytest          (For running tests)
# #####  poetry run pytest tests/test_mqtt_connector_lib/test_gmqtt_connector.py -v   (For running tests of a module)

#***********************************************

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mqtt-connector-lib"
version = "0.0.1"
description = "mqtt con, disconn, sub, pub"
authors = ["harikrishna2005@gmail.com"]
readme = "README.md"
packages = [
    { include = "mqtt_connector_lib", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.12"
gmqtt = "0.7.0"
pytest = {version = "^7.4.0", optional = true}
pytest-asyncio = {version = "^0.21.0", optional = true}
pytest-cov = {version = "^4.1.0", optional = true}
dependency-injector = "^4.48.2"

[tool.poetry.extras]
test = ["pytest", "pytest-asyncio", "pytest-cov"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
